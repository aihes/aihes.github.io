<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://aihes.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aihes.github.io/" rel="alternate" type="text/html" /><updated>2023-06-18T07:29:09+00:00</updated><id>https://aihes.github.io/feed.xml</id><title type="html">AI 贺</title><subtitle>基于Github的个人简介.</subtitle><entry><title type="html">Github Pages 使用指南</title><link href="https://aihes.github.io/jekyll/update/2023/06/18/Github-Pages%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97.html" rel="alternate" type="text/html" title="Github Pages 使用指南" /><published>2023-06-18T01:29:09+00:00</published><updated>2023-06-18T01:29:09+00:00</updated><id>https://aihes.github.io/jekyll/update/2023/06/18/Github%20Pages%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97</id><content type="html" xml:base="https://aihes.github.io/jekyll/update/2023/06/18/Github-Pages%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97.html"><![CDATA[<h1 id="github-pages-使用指南">Github Pages 使用指南</h1>

<p>Github Pages 是一个免费的静态网站托管服务，它允许你通过简单的几个步骤就可以把你的项目、博客或者个人网站托管在 Github 上。在这篇文章中，我们将详细介绍如何使用 Github Pages 服务来建立和部署你的第一个静态网站。</p>

<h2 id="一创建-github-账户">一、创建 Github 账户</h2>

<p>首先，你需要一个 Github 账户。如果你还没有，请访问 <a href="https://github.com/">Github 官网</a> 注册一个新账户。</p>

<h2 id="二创建仓库">二、创建仓库</h2>

<ol>
  <li>
    <p>登录到你的 Github 账户，点击右上角的 “+” 按钮，然后选择 “New repository”。</p>

    <p><img src="https://docs.github.com/assets/images/help/repository/repo-create.png" alt="创建仓库" /></p>
  </li>
  <li>
    <p>为新仓库起一个名字。如果你想要创建一个个人网站，那么仓库的名称必须是 <code class="language-plaintext highlighter-rouge">yourusername.github.io</code>（将 <code class="language-plaintext highlighter-rouge">yourusername</code> 替换为你的 Github 用户名）。如果你想要创建一个项目网站，可以为仓库起一个与项目相关的名字。</p>
  </li>
  <li>
    <p>选择 “Public”（公开）作为仓库的可见性，并勾选 “Initialize this repository with a README”（用 README 初始化此仓库），然后点击 “Create repository”。</p>

    <p><img src="https://docs.github.com/assets/images/help/repository/create-repository-public.png" alt="命名仓库" /></p>
  </li>
</ol>

<h2 id="三为仓库添加内容">三、为仓库添加内容</h2>

<ol>
  <li>
    <p>进入你刚刚创建的仓库，点击 “Add file”（添加文件）按钮，选择 “Create new file”（创建新文件），创建一个名为 <code class="language-plaintext highlighter-rouge">index.html</code> 的文件。</p>

    <p><img src="https://docs.github.com/assets/images/help/repository/create_new_file.png" alt="创建文件" /></p>
  </li>
  <li>
    <p>在 <code class="language-plaintext highlighter-rouge">index.html</code> 文件的编辑器中，输入以下 HTML 代码：</p>

    <pre><code class="language-`html">&lt;!DOCTYPE html&gt;
&lt;html lang="zh-CN"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;欢迎来到我的 Github Pages 网站&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;欢迎来到我的 Github Pages 网站&lt;/h1&gt;
  &lt;p&gt;这是一个简单的示例页面。&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
  </li>
  <li>
    <p>点击 “Commit new file”（提交新文件），将 <code class="language-plaintext highlighter-rouge">index.html</code> 文件添加到仓库中。</p>
  </li>
</ol>

<h2 id="四启用-github-pages">四、启用 Github Pages</h2>
<h3 id="默认配置">默认配置</h3>
<ol>
  <li>
    <p>进入仓库的 “Settings”（设置）选项卡，滚动到 “GitHub Pages” 部分。</p>

    <p><img src="https://docs.github.com/assets/images/help/pages/pages-settings.png" alt="Github Pages 设置" /></p>
  </li>
  <li>
    <p>在 “Source”（来源）下拉菜单中选择 “main” 分支，然后点击 “Save”（保存）按钮。</p>

    <p><img src="https://docs.github.com/assets/images/help/pages/select-main-as-source.png" alt="启用 Github Pages" /></p>
  </li>
  <li>
    <p>页面将自动刷新，滚动回到 “GitHub Pages” 部分。你会看到一个绿色的提示框，显示 “Your site is published at <a href="https://yourusername.github.io">yourusername.github.io</a>“（你的网站发布在 <a href="https://yourusername.github.io">yourusername.github.io</a>）。</p>

    <p><img src="https://docs.github.com/assets/images/help/pages/pages-success.png" alt="发布成功" /></p>
  </li>
</ol>

<h3 id="使用-github-actions-配置和部署-github-pages">使用 Github Actions 配置和部署 Github Pages</h3>

<p>在本节中，我们将介绍如何使用 Github Actions 配置和部署你的 Github Pages 网站。Github Actions 是一种自动化工具，它可以帮助你自动构建、测试和部署你的代码。接下来，我们将创建一个简单的 Github Actions 工作流程来部署我们的 Github Pages 网站。</p>

<h4 id="1-创建工作流文件">1. 创建工作流文件</h4>

<p>在你的仓库根目录下，创建一个名为 <code class="language-plaintext highlighter-rouge">.github/workflows</code> 的文件夹。然后，在这个文件夹中创建一个名为 <code class="language-plaintext highlighter-rouge">deploy.yml</code> 的文件。你的仓库结构应该如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>your_repository/
  |-- .github/
  |     |-- workflows/
  |           |-- deploy.yml
  |-- index.html
  |-- README.md
</code></pre></div></div>

<h4 id="2-编写-github-actions-工作流配置">2. 编写 Github Actions 工作流配置</h4>

<p>打开 <code class="language-plaintext highlighter-rouge">deploy.yml</code> 文件，将以下 YAML 代码复制到其中：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Deploy to Github Pages</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">main</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>

    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout repository</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>
      
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup Node.js</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v2</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">node-version</span><span class="pi">:</span> <span class="m">14</span>

    <span class="c1"># 可选：在此处添加构建步骤，例如安装依赖、运行构建命令等。</span>
    <span class="c1"># - name: Install dependencies</span>
    <span class="c1">#   run: npm ci</span>
    <span class="c1"># - name: Build</span>
    <span class="c1">#   run: npm run build</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Deploy to Github Pages</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">peaceiris/actions-gh-pages@v3</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">github_token</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">publish_dir</span><span class="pi">:</span> <span class="s">./</span> <span class="c1"># 将此更改为你的构建输出目录，例如：./dist</span>
</code></pre></div></div>

<p>这个工作流配置的主要步骤如下：</p>

<ol>
  <li>当代码推送到 <code class="language-plaintext highlighter-rouge">main</code> 分支时，触发工作流。</li>
  <li>使用 <code class="language-plaintext highlighter-rouge">ubuntu-latest</code> 作为运行环境。</li>
  <li>检出仓库代码。</li>
  <li>设置 Node.js 环境（可根据你的项目需要调整版本）。</li>
  <li>（可选）添加构建步骤，例如安装依赖、运行构建命令等。</li>
  <li>使用 <code class="language-plaintext highlighter-rouge">peaceiris/actions-gh-pages</code> Github Action 部署到 Github Pages。</li>
</ol>

<h4 id="3-提交更改">3. 提交更改</h4>

<p>将 <code class="language-plaintext highlighter-rouge">.github</code> 文件夹添加到仓库，并提交更改：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add .github
git commit -m "Add Github Actions workflow"
git push origin main
</code></pre></div></div>

<h4 id="4-查看-github-actions-运行结果">4. 查看 Github Actions 运行结果</h4>

<p>提交更改后，转到你的仓库页面，点击 “Actions” 选项卡，你应该能看到一个正在运行或已完成的工作流。点击工作流名称，查看详细信息和运行结果。</p>

<p><img src="https://docs.github.com/assets/images/help/repository/actions-tab.png" alt="Github Actions 运行结果" /></p>

<h4 id="5-访问-github-pages-网站">5. 访问 Github Pages 网站</h4>

<p>如果 Github Actions 工作流运行成功，你的 Github Pages 网站应该已经更新并部署。访问 <code class="language-plaintext highlighter-rouge">https://yourusername.github.io</code>（将 <code class="language-plaintext highlighter-rouge">yourusername</code> 替换为你的 Github 用户名）来查看你的网站。</p>

<p>现在，每当你将更改推送到 <code class="language-plaintext highlighter-rouge">main</code> 分支时，Github Actions 都会自动构建和部署你的 Github Pages 网站。你可以根据你的项目需求自定义工作流配置，例如添加构建步骤、运行测试等。更多关于 Github Actions 的信息，请参考 <a href="https://docs.github.com/en/actions">官方文档</a>。</p>

<h2 id="五访问你的-github-pages-网站">五、访问你的 Github Pages 网站</h2>

<p>现在，你可以通过访问 <code class="language-plaintext highlighter-rouge">https://yourusername.github.io</code>（将 <code class="language-plaintext highlighter-rouge">yourusername</code> 替换为你的 Github 用户名）来查看你的 Github Pages 网站。</p>

<h2 id="六自定义域名可选">六、自定义域名（可选）</h2>

<p>如果你想要为你的 Github Pages 网站使用自定义域名，可以参照 <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site">Github 官方文档</a> 进行设置。</p>

<h2 id="总结">总结</h2>

<p>现在你已经成功创建了一个 Github Pages 网站。你可以随时更新你的网站内容，只需将更改提交到仓库的 “main” 分支上即可。随着你对 Github Pages 的熟悉，你还可以尝试使用 <a href="https://jekyllrb.com/">Jekyll</a> 等静态站点生成器来构建更复杂的网站。</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Github Pages 使用指南]]></summary></entry><entry><title type="html">Jekyll安装过程记录</title><link href="https://aihes.github.io/jekyll/update/2022/07/03/install-jekly.html" rel="alternate" type="text/html" title="Jekyll安装过程记录" /><published>2022-07-03T01:29:09+00:00</published><updated>2022-07-03T01:29:09+00:00</updated><id>https://aihes.github.io/jekyll/update/2022/07/03/install-jekly</id><content type="html" xml:base="https://aihes.github.io/jekyll/update/2022/07/03/install-jekly.html"><![CDATA[<p>1、升级Homobrew
2、通过brew安装ruby</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>ruby
</code></pre></div></div>
<p>3、安装jekyll相关的包</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>gem <span class="nb">install </span>jekyll bundler
jekyll new myblog
<span class="nb">cd </span>myblog
bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>

<p>4、配置jekyll的主题；https://mmistakes.github.io/minimal-mistakes/docs/configuration/</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 添加Gemfile</span>
gem <span class="s2">"minimal-mistakes-jekyll"</span>
<span class="c"># 安装主题</span>
bundle
<span class="c"># 配置主题，在_config.yml</span>
theme: minimal-mistakes-jekyll
</code></pre></div></div>

<p>5、去Github上配置默认的网站</p>
<ul>
  <li>新建一个repositoy：仓库的名字一定要和个人的名字相同: https://pages.github.com/</li>
  <li>配置当前的jekelly内容到github上</li>
</ul>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[1、升级Homobrew 2、通过brew安装ruby brew install ruby 3、安装jekyll相关的包 sudo gem install jekyll bundler jekyll new myblog cd myblog bundle exec jekyll serve]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="https://aihes.github.io/jekyll/update/2022/07/03/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2022-07-03T01:29:09+00:00</published><updated>2022-07-03T01:29:09+00:00</updated><id>https://aihes.github.io/jekyll/update/2022/07/03/welcome-to-jekyll</id><content type="html" xml:base="https://aihes.github.io/jekyll/update/2022/07/03/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>